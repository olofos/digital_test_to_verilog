/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


// decimal synchronous counter
module \74162  (
  input \~LD ,
  input \~CLR ,
  input CLK,
  input ENT,
  input ENP,
  input A,
  input B,
  input C,
  input D,
  input VCC,
  input GND,
  output RCO,
  output QA,
  output QB,
  output QC,
  output QD
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire s6;
  wire [3:0] s7;
  wire [3:0] s8;
  assign s3 = (ENP & ENT);
  assign s7[0] = A;
  assign s7[1] = B;
  assign s7[2] = C;
  assign s7[3] = D;
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i0 (
    .sel( s3 ),
    .in_0( s1 ),
    .in_1( s4 ),
    .out( s5 )
  );
  assign RCO = (s6 & ENT);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( \~LD  ),
    .in_0( s7 ),
    .in_1( s5 ),
    .out( s8 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( \~CLR  ),
    .in_0( 4'b0 ),
    .in_1( s8 ),
    .out( s0 )
  );
  // Q
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i3 (
    .D( s0 ),
    .C( CLK ),
    .Q( s1 )
  );
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i4 (
    .a( s1 ),
    .b( 4'b1 ),
    .c_i( 1'b0 ),
    .s( s2 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i5 (
    .a( s1 ),
    .b( 4'b1001 ),
    .\= ( s6 )
  );
  assign QA = s1[0];
  assign QB = s1[1];
  assign QC = s1[2];
  assign QD = s1[3];
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i6 (
    .sel( s6 ),
    .in_0( s2 ),
    .in_1( 4'b0 ),
    .out( s4 )
  );
endmodule
